#* D1
{
#/ init create-react-app
- everything configured already
- Uses Webpack as bundler
- jest for testing 
- so forth and so on 

#/ clean and setup tailwind

#/ structure of app
-> index.js -> App.js -> Body
-> body.js -> Header && (Login OR Browse)
- configured react-router-dom to make "/" and "/browse"

#  Built header 
#/ SignIn/SignUp form Page
- using state variable toggle  

#/ Validating The form 
-  UseRef hook 
- to pass refernce of input fileds to validation function

#/ Authorization using firebase as BACK-END
- goto firebase.google
- create a new project

- select web app to start
-> npm i firebase 
- make firebase.js and paste configs

- if need to deploy to firebase do it specify urls etc
- deplying steps
-> npm i -g firebase-tools
-> firebase login (login same account used to create web app on firebase.google.com)
-> firebase init
-> select options
- in this case hoisting optionally with github deploy
- we dont want to deply on every push
-> creates fireabase.config and firebase.rc 
-> firebase deploy
- deploys site to default url
- to push to diff url mention it in firebase.config
-> also add "rewrites" :{"**":/index.html}
- to avoid 404 on page switch from url bar

- select auth methods from website
#/ setting up sign in sign up 
- find auth code for web using password 
- from firebase website

#/ for every api/method call of firebase
# we need auth from getAuth() which comes from ./firebase/auth
- so call it once in firebase.js only so no need to do it again and again
-> const auth = getAuth();
- and export it 
#/ Now use the inbuild api's of firebase to sign in or signup the user
-> createUserWithEmailAndPassword(auth , email, password)
-> signInWithEmailAndPassword(auth , email, password)
- both retrns userCredentials 
- if login is succesful
# Or err message if not
-> use .then() and .catch to handle these

#/ Setting up Redux
-> npm i react-redux & @reduxjs/toolkit
- configure store appStore
- create slice userSlice
- name, initalstate , reducers:{action: ()=>{} }
- export actions and slice.reducer;
#  provide reducer userReducer to appStore
# provide store={appStore} to whole app

- now after user Info is with us 
- we need to update the userSlice and
- navigate to /browse

# we can use dispatch action after signin/signup/logout
- every where again again 
#/ Instead use firebase onAuthStateChanged API
- this works as an eventListner 
- as soon as user signin/up/out this will be called
- so wriiting it in root directry ie Body.js
- and in useState as it will work always just need to attach once
#/ Navigating after sign in sign out 
# useNavigate from router
- cant be used in body as body itself has router in it
- and not above it
- so use naviage in child component

#/ Building /browse page
- add header and user icon as well as 
#  signOut btn
- on signout call firebase api signOut(auth).then().catch();
- if success navigate to "/"

#/ Update user
- Now after user Acoount is created we can update userProfile
- userName , photo etc
- into firebase 
- using firebase updateUser api
- and place those in /browse

#!  but currently 
- redux store is updating as soon as signUp completes
- resulting in half info in user Slice and UI
- and profile data is updated after that
#/ so to remove this issue 
- update redux after update profile completes also
#! its better to use the user from auth ( = getAuth() vala) 
- to get updated value of userInfo while updating
-> const user = auth.currentUser;
}

#* D2
{
#/ fixing bugs
- restrict user to access /browse if not logged in
- did myself by using useNavigate() inside browse page
#  so if user is null it should take back to "/"
#/ Make sure to use navigate inside useEffect
- so that is called after component gets rendered 
- else errors

#/ Now restricting user to login page if already signed in
- shifting onAuthChanged api/eventListner
- of firebase to header component
- as header is present on every page and inside router provider
- it is ideal place to write navigation logic and restrictions
#! now upper logic also not needed ie browse !->! login
# just naviagate after every auth state change only
- and if user tries to go to /browse or / 
- authState will check and take to appropriate page automatically
#/ as getAuthStateChanged is kind of an eventlistner
- we also need to remove it if componenet is unMounted
#/ for this it returns an unsubscribe function already
- use that in return()=>unsubscribe() in useEffect of header
- to remove it and stop them from pilling up

#/ Lets get movies from TMDB API
- sign in to tmdb goto dev -> api -> key
# store apiOptions in constants
- fetch now playing movies from api by providing option along
-> fetch('url',options)
- options are header info + API token to send along

#/ movieSlice to store movies data here
- movieSlice -> addNowPlaying action
- export both reducer and actions
- import reducer into appStore and use actions with dispatch
# dispatch the nowPlayingMovies to store

#/ planning the Browse Page
{
    MainContainer
    - Video Title
       - VideoBG
    SecondaryConatiner
      - MoviesLists * N
          - MovieCards * N
}
#/ Videobackground
- choose a movie from list of movies
- from its id 
- fetch its trailer video key of youtube 
- using Video api given by TMDB
- now use that key to embeddd video into backGround
# Also add video title and desc on top of vid
#/ added parameters to iframe for better experience 
- did good css looks amazing

#/ Secondary Container
- it will have miltiple rows
#/ MovieList - it will get/map list of movies of each type
- each row will  have some movies
#/ MovieCard - it will get/map on each movie of that category
- make list overflow scroll
#/ getched other categories as well
- and added to secondary container
}

#* D3
{
#/ Using ChatGPT/Gemini as movie suggestions system
- Building the search page
- adding toggle button in header 
- Using redux Store to store the toggle info 
- in Search Slice

#/ Planing search Page
- Search-bar
- suggestions
# Built search bar and added css

#? adding multiple lang to search page

#/ Got GEMINI KEY
- formed a good promt to pass
- reqested comma separeated movie names
- converted them to arr of titles

- for each title 
# fetch movies details from TMDB
# initially all would return an promise
- use Promise.all to resolve all and return arr of results 
- now show all movies which are ok ok popular and have img attached
# Reuse movieList component
#* and a lot of CSS

# Added loading to search page
- and error handling also done


#/ securing the keys and imp info
-> make .env file
- add all consts which are secret 
- and add .env to gitignore
# while deploying make sure to config env of that server also
- REACT_APP_KEY is naming convention for .env things in react


#/ make api calls only if redux store doesn't contain that list
- added condition in both fetch hooks

#/ v1.0 done âœ…
}

#* D4
{
#/ made Genie a separate page/route
# made routing work according to currentl url
- using useLocation hook

#/ implemented MovDetails page
- showed relevant info and ytVid associated

# fixed main trailer video 

# Added favicon
}

#* D5
{
#/ fixed main trailer not matching 

#/ made improvements to movie page

#/ fixed laoding png 

#/ made Genie page better 
}
#* D6
{
#/ ces 

#* fix movie list with proxy if error occurs

#/ navigate(-1) instead of navigate.history.back()

#/ and other fixes
}mute/unmute feature 
- may not work for all devi

#* D7
{
#/ enabled lazy loading in all components
- as well as images

#/ fixed loading while trailer vid not available

#/ fixed cast component while cast not available

#/ added skewed search items/suggestions
}